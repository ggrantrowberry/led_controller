{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["serverAddress","CANDLECOUNT","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getStates","axios","get","then","res","console","log","data","candleStates","setState","prevState","newState","length","candle_data","i","state","updateCandles","push","id","_this2","interval","setInterval","react_default","a","createElement","className","style","width","height","display","justifyContent","alignItems","flexFlow","ButtonDeck","Component","map","button_data","App_Button","key","candleState","Button","handleCandlePress","post","candleID","_this3","backgroundColor","outlineColor","borderStyle","borderColor","margin","borderRadius","borderWidth","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1ceee08.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\n\nconst serverAddress = \"http://192.168.4.1:5000\"\n\nconst CANDLECOUNT = 24;\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    //Set up the buttons\n    let candle_data = [];\n    for(let i = 0; i < CANDLECOUNT; i++){\n      candle_data.push({\n        id: i, \n        state: 0\n      });\n    }\n\n    this.state={\n      candle_data: candle_data,\n      //ventSource: new EventSource(serverAddress+\"/stream\")\n    }\n\n    //this.eventSource = new EventSource(serverAddress+\"/stream\");\n\n  }  \n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.getStates();\n    }, 200);\n    // this.eventSource.onmessage = e => {\n    //   this.updateCandles(JSON.parse(e.data))};\n    //this.state.eventSource.addEventListener('candle_update', (e) => { console.log(e); this.updateCandles(JSON.parse(e.data));});\n  }\n\n  getStates = () => {\n    axios.get(serverAddress+\"/get_states\")\n    .then(res => {\n      console.log(res.data);\n      let candleStates = res.data;\n\n      this.setState(prevState => {\n        let newState = prevState;\n        console.log(candleStates);\n        if(candleStates.length !== newState.candle_data.length){\n  \n          console.log(\"Candle state lengths are not the same\");\n  \n        } else {\n  \n          for(let i = 0; i < newState.candle_data.length; i++){\n            newState.candle_data[i].state = candleStates[i];\n          }\n  \n        }\n  \n        return newState\n      });\n    })\n  }\n\n  updateCandles = (candleStates) => {\n    console.log(\"candleState\", candleStates);\n    this.setState(prevState => {\n      let newState = prevState;\n      console.log(candleStates);\n      if(candleStates.length !== newState.candle_data.length){\n\n        console.log(\"Candle state lengths are not the same\");\n\n      } else {\n\n        for(let i = 0; i < newState.candle_data.length; i++){\n          newState.candle_data[i].state = candleStates[i];\n        }\n\n      }\n\n      return newState\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\" style={{ width: '100%', height: '100%', display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n        <div style={{display:'flex', flexFlow: 'row wrap', justifyContent: 'center'}}>\n          <ButtonDeck\n            candle_data={this.state.candle_data}\n          />\n        </div>\n\n      </div>\n    );\n  }\n}\n\nfunction ButtonDeck(props){\n  return props.candle_data.map((button_data) => {\n    return (\n      <Button\n        id={button_data.id}\n        key={button_data.id}\n        candleState={button_data.state}\n      ></Button>\n    );\n  }) \n}\n\nclass Button extends Component{\n  handleCandlePress = () => {\n    axios.post(serverAddress+\"/switch\", { candleID: this.props.id, candleState: !this.props.candleState })\n    .then(res => {\n      console.log(res);\n      console.log(res.data);\n    })\n  }\n\n  render() {\n    let backgroundColor = '#99A3A4';\n    let outlineColor = '#515A5A';\n    if(this.props.candleState){\n      backgroundColor = '#F5B041';\n      outlineColor = '#D35400'\n    }\n    return (\n      <div style={{height: '10vh', width: '10vh', backgroundColor: backgroundColor, \n        borderStyle: 'solid', borderColor: outlineColor, margin: '20px', borderRadius: '5px', borderWidth: '7px'}}\n        onClick={this.handleCandlePress}\n      >\n        {this.props.id}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}